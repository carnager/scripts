#!/bin/bash

source $HOME/.config/localfm/config

# create scrobble files from sources
getScrobbles () {
    if [[ -n ${mpdscribble} ]]; then
        # copy mpd scrobbles
        echo "Getting mpd scrobbles"
        scp -q "${mpdscribble}" $HOME/.config/localfm/scrobbles.mpd
    fi
    
    # check if rockbox is mounted and create scrobbles file
    if [[ -n ${rockbox} ]]; then
        if [[ -f "${rockbox}/.scrobbler.log" ]]; then
            echo "Getting rockbox scrobbles"
            cp "${rockbox}/.scrobbler.log" "/tmp/rockbox.log"
            awk -F '\t' 'NR > 3 { print strftime("%Y-%m-%dT%H:%M:%S%z", $7), $1 " - " $3 }' /tmp/rockbox.log > $HOME/.config/localfm/scrobbles.$(date +%s).rockbox
        fi
    fi
    
    # create combined scrobbles file
    echo "Creating combined scrobbles file"
    cat $HOME/.config/localfm/scrobbles.* | sort > $HOME/.config/localfm/combined.log
    echo "...done"
    exit
}

main () {
    stuff=$(grep -i "$name" $HOME/.config/localfm/combined.log |awk '{first = $1; $1 = ""; print $0 }' | sort | uniq -c)
    artists=$(grep -i "$name" $HOME/.config/localfm/combined.log | awk -F ' - ' '{ print $1 }' | awk '{ print substr($0, index($0,$2)) }' | sort | uniq -c | sort)
    if [[ -n $album ]]; then
        if [[ -z $name ]]; then exit; fi
        rm -f /tmp/list
        echo "${stuff}" | sort | while read line; do
            plays=$(echo "$line" | awk -F ' ' '{ print $1 }')
            split=$(echo "$line" | awk '{first = $1; $1 = ""; print $0}' | cut -c 2-)
            artist=$(echo "$split" | awk -F ' - ' '{ print $1 }')
            title=$(echo "$split" | awk -F ' - ' '{ print $2 }')
            echo -e "$(mpc search --format '%artist% - %album%' artist "${name}" title "${title}" | head -1)" >> /tmp/list
        done
        echo -e "Most played albums for keyword \"${name}\":\n"   
        cat /tmp/list | sort | uniq -c | sort | distribution -g --height=$lines --size=full --char=$char --width=100 ${color} 2>/dev/null | grep -vE "^-"
    else
        if [[ -n "$artist" ]]; then
            echo -e "Top ${lines} artists:\n"
            echo "${artists}" | sort | distribution -g --height=$lines --size=full --char=$char --width=100 ${color} 2>/dev/null
            echo "---"
            echo "Scrobbled $(echo "${artists}" | sort -u | wc -l) artists since $(head -1 $HOME/.config/localfm/combined.log | cut -c 1-10)"
        else
            echo -e "Top ${lines} tracks for keyword \"${name}\"\n"
            echo "${stuff}" | sort | distribution -g --height=$lines --size=full --char=$char --width=100 ${color} 2>/dev/null
            echo "---"
            echo "$(echo "${stuff}" | awk '{s+=$1} END {print s}') tracks scrobbled matching keyword \"${name}\" since $(head -1 $HOME/.config/localfm/combined.log | cut -c 1-10)"
        fi
    fi
}

printHelp () {
cat << EOF
Usage: ${0##*/} [-saA] [-n {current,KEYWORD}] [-c CHARACTER] [-l LINES]

    -n "keyword"    keyword to search for (has to be first option)
                    use "current" to use currently playing artist
    -s              colorize output
    -A              print artist stats
    -a              print album stats (needs "-n")
    -c "foo"        use character "foo" for histogram
    -l "int"        print "int" lines
    -g              update local scrobble files
EOF
}

OPTIND=1

# default options
char=ba
lines=10

# parse arguments
while getopts "hgAasn:l:c:" opt; do
    case "$opt" in
        h)
            printHelp
            exit 0
            ;;
        n)
            if [[ $OPTARG == "current" ]]; then
                name="$(mpc current -f '%artist%')"
            else
                name=$OPTARG
            fi
            ;;
        a)
            if [[ -z $name ]]; then
                echo "No artist specified"
                exit 0
            else
                album=true
            fi
            ;;
        l)
            lines=$OPTARG
            ;;
        c)
            char=$OPTARG
            ;;
        s)
            color="--color"
            ;;
        g)
            getScrobbles
            ;;
        A)
            artist=true
            ;;
    esac
done
shift "$((OPTIND-1))"
main
