#!/bin/bash

source $HOME/.config/localfm/config

# create scrobble files from sources
getScrobbles () {
    if [[ -n ${mpdscribble} ]]; then
        # copy mpd scrobbles
        echo -en "Getting mpd scrobbles...\r"
        if [[ $local == "false" ]]; then
            scp -q "${mpdscribble}" $HOME/.config/localfm/scrobbles.mpd
        elif [[ $local == "true" ]]; then
            cp "${mpdscribble}" $HOME/.config/localfm/scrobbles.mpd
        fi
        sleep 2
        echo "Getting mpd scrobbles...            [✓]"
    fi
    
    # check if rockbox is mounted and create scrobbles file
    if [[ -n ${rockbox} ]]; then
        if [[ -f "${rockbox}/.scrobbler.log" ]]; then
            echo -en "Getting rockbox scrobbles...\r"
            cp "${rockbox}/.scrobbler.log" "/tmp/rockbox.log"
            awk -F '\t' 'NR > 3 { print strftime("%Y-%m-%dT%H:%M:%S%z", $7), $1 " - " $3 }' /tmp/rockbox.log > $HOME/.config/localfm/scrobbles.$(date +%s).rockbox
            sleep 2
            echo "Getting rockbox scrobbles           [✓]"
            echo "... Imported $(( $(wc -l /tmp/rockbox.log | awk '{ print $1}' ) - 3 )) tracks from Rockbox"
        fi
    fi
    
    # create combined scrobbles file
    echo -en "Creating combined scrobbles file...\r"
    cat $HOME/.config/localfm/scrobbles.* | sort | uniq > $HOME/.config/localfm/combined.log
    sleep 2
    echo "Creating combined scrobbles file... [✓]"
    exit
}

main () {
    stuff=$(grep -i "$name" $HOME/.config/localfm/combined.log |awk '{first = $1; $1 = ""; print $0 }' | sort | uniq -c | sort -nr)
    artists=$(cat $HOME/.config/localfm/combined.log | awk -F ' - ' '{ print $1 }' | awk '{ print substr($0, index($0,$2)) }' | sort | uniq -c | sort -nr)
    if [[ -n $album ]]; then
        if [[ -z $name ]]; then exit; fi
        rm -f /tmp/list
        echo "${stuff}" | sort | while read line; do
            plays=$(echo "$line" | awk -F ' ' '{ print $1 }')
            split=$(echo "$line" | awk '{first = $1; $1 = ""; print $0}' | cut -c 2-)
            title=$(echo "$split" | awk -F ' - ' '{ print $2 }')
            echo -e "$(echo ${plays}) $(mpc search --format '%artist% - %album%' albumartist "${name}" title "${title}" | head -1)" >> /tmp/list
        done
        echo -e "Most played albums for keyword \"${name}\":\n"   
        cat /tmp/list | sort -nr | distribution -g --height=$lines --size=full --char=$char --width=100 ${color} 2>/dev/null | grep -vE "^-"
    else
        if [[ -n "$artist" ]]; then
            echo -e "Top ${lines} artists:\n"
            echo "${artists}" | sort -nr | distribution -g --height=$lines --size=full --char=$char --width=100 ${color} 2>/dev/null
            echo "---"
            echo "Scrobbled $(echo "${artists}" | sort -nr | wc -l) artists since $(head -1 $HOME/.config/localfm/combined.log | cut -c 1-10)"
        else
            echo -e "Top ${lines} tracks for keyword \"${name}\"\n"
            echo "${stuff}" | sort | distribution -g --height=$lines --size=full --char=$char --width=100 ${color} 2>/dev/null
            echo "---"
            echo "$(echo "${stuff}" | awk '{s+=$1} END {print s}') tracks scrobbled matching keyword \"${name}\" since $(head -1 $HOME/.config/localfm/combined.log | cut -c 1-10)"
        fi
    fi
}

printHelp () {
cat << EOF
Usage: ${0##*/} [-saA] [-n {current,KEYWORD}] [-c CHARACTER] [-l LINES]

    -n "keyword"     keyword to search for (has to be first option)
                     use "current" to use currently playing artist
    -s "true/false"  colorize output
    -A               print artist stats
    -a               print album stats (needs "-n")
    -c "foo"         use character "foo" for histogram
    -l "int"         print "int" lines
    -g               update local scrobble files
EOF
}

OPTIND=1

# default options
if [[ -z $char ]]; then
    char=ba
else char="${char}"
fi
if [[ -z $lines ]]; then
    lines=10
else 
    lines=$lines
fi
if [[ $color == "true" ]]; then
    color="--color"
elif [[ $color == "false" ]]; then
    color=""
fi


# parse arguments
while getopts "hgAas:n:l:c:" opt; do
    case "$opt" in
        h)
            printHelp
            exit 0
            ;;
        n)
            if [[ $OPTARG == "current" ]]; then
                name="$(mpc current -f '%artist%')"
            else
                name=$OPTARG
            fi
            ;;
        a)
            if [[ -z $name ]]; then
                echo "No artist specified"
                exit 0
            else
                album=true
            fi
            ;;
        l)
            lines=$OPTARG
            ;;
        c)
            char=$OPTARG
            ;;
        s)
            color="$OPTARG"
            if [[ $color == "true" ]]; then
                color="--color"
            elif [[ $color == "false" ]]; then
                color=""
            fi
            ;;
        g)
            getScrobbles
            ;;
        A)
            artist=true
            ;;
    esac
done
shift "$((OPTIND-1))"
main
